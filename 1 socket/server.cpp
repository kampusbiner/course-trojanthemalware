/*

Created By: KampusBiner

Simak tutorialnya di: https://www.youtube.com/playlist?list=PL7TeU9V9_9pKsTeKtQiC4bjJ7T-Ie_GCz

*/

#include <winsock2.h>
#include <iostream>

using namespace std;

struct CUSINFO{
    SOCKET hCusSocket;
    struct sockaddr_in clientAddr;
};

char szServerIP[] = "192.168.1.7";
int nServerPort = 5110;

bool initWinSock();
BOOL WINAPI clientThread(LPVOID lpInfo);

int main(){
    if (!initWinSock()){
        cout << "Error init winsock: " << WSAGetLastError( ) << endl;
        return -1;
    }

    SOCKET hServerSocket;

    hServerSocket = socket(AF_INET,SOCK_STREAM,0);
    
    if (hServerSocket == INVALID_SOCKET){
        cout << "Unable to create Server socket" << endl;
        WSACleanup( );
        return -1;
    }

    struct sockaddr_in serverAddr;

    serverAddr . sin_family = AF_INET;
    serverAddr . sin_addr . s_addr = inet_addr(szServerIP);
    serverAddr . sin_port = htons(nServerPort);

    //binding
    if (bind(hServerSocket, (struct sockaddr *) &serverAddr, sizeof(serverAddr)) == SOCKET_ERROR){
        cout << "Tidak dapat membinding IP dan port" << endl;
        closesocket(hServerSocket);
        WSACleanup();
        return -1;
    }

    //listen client connection
    if (listen(hServerSocket, SOMAXCONN) == SOCKET_ERROR){
        cout << "Tidak dapat me-listen" << endl;
        closesocket(hServerSocket);
        WSACleanup();
        return -1;
    }
	
	cout << "Koneksi terbentuk, menunggu client" << endl;
	
    while(true){
        SOCKET hCusSocket;
        struct sockaddr_in clientAddr;
        int nClientAddr = sizeof(clientAddr);

        hCusSocket = accept(hServerSocket, (struct sockaddr *) &clientAddr, &nClientAddr);
        if (hCusSocket == INVALID_SOCKET){
            cout << "Gagal terkoneksi dgn client" << endl;
        }else{
            HANDLE hclientThread;
            struct CUSINFO clientInfo;
            DWORD dwThreadId;

            clientInfo . clientAddr = clientAddr;
            clientInfo . hCusSocket = hCusSocket;

            cout << "Client berhasil terkoneksi: " << inet_ntoa(clientAddr . sin_addr) << endl;

            hclientThread = CreateThread(NULL, 0,(LPTHREAD_START_ROUTINE) clientThread,(LPVOID) &clientInfo, 0, &dwThreadId);
            
			if (hclientThread == NULL){
                cout << "Tidak dapat membuat thread untuk client" << endl;
            }else{
                CloseHandle(hclientThread);
            }
        }
    }

    closesocket(hServerSocket);
    WSACleanup();
    return 0;
}

bool initWinSock(){
    WSADATA wsaData;
    if(!WSAStartup(MAKEWORD(2,0), &wsaData))return true;

    return false;
}

BOOL WINAPI clientThread(LPVOID lpInfo){
    CUSINFO *pClientInfo = (CUSINFO *) lpInfo;
    char szMessage[1024];
    int nMessage;

    while(true){
    	
    	fill(szMessage, szMessage + sizeof(szMessage), 0);
    	
        nMessage = recv(pClientInfo -> hCusSocket, szMessage, sizeof(szMessage), 0);
        if (nMessage > 0){
        	
            szMessage[nMessage] = '\0';
            
            cout << "Kiriman dari client (" << inet_ntoa(pClientInfo -> clientAddr . sin_addr) << ") : " << szMessage << endl;

            if (strcmp( szMessage, "exit") == 0){
                closesocket(pClientInfo -> hCusSocket);
                cout << "Client " << inet_ntoa(pClientInfo -> clientAddr . sin_addr) << "keluar" << endl;
                return TRUE;
            }
            
            strcat(szMessage, ". Salam dari server :)");
            
            int nSend = 0;
            char *pMessage = szMessage;

            while ((nSend = send( pClientInfo -> hCusSocket, pMessage, nMessage+22, 0) != nMessage+22)){
                if (nSend == -1){
                    cout << "Error mengirimkan data ke client: " << inet_ntoa(pClientInfo -> clientAddr . sin_addr) << endl;
                    break;
                }
                
                if (nSend == nMessage)break;

                pMessage += nSend;
                nMessage -= nSend;
            }
        }else{
            cout << "Error membaca data dari client: " << inet_ntoa(pClientInfo -> clientAddr . sin_addr) << endl;
        }
    }

    return TRUE;
}
